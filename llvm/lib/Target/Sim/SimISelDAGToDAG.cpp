//===-- SimISelDAGToDAG.cpp - A dag to dag inst selector for Sim ------===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
//
// This file defines an instruction selector for the Sim target.
//
//===----------------------------------------------------------------------===//

#include "Sim.h"
#include "SimTargetMachine.h"
#include "llvm/CodeGen/MachineRegisterInfo.h"
#include "llvm/CodeGen/SelectionDAGISel.h"
#include "llvm/IR/Intrinsics.h"
#include "llvm/Support/Debug.h"
#include "llvm/Support/ErrorHandling.h"
#include "llvm/Support/raw_ostream.h"

using namespace llvm;

#define DEBUG_TYPE "sim-isel"

//===----------------------------------------------------------------------===//
// Instruction Selector Implementation
//===----------------------------------------------------------------------===//

//===--------------------------------------------------------------------===//
/// SimDAGToDAGISel - Sim specific code to select Sim machine
/// instructions for SelectionDAG operations.
///
namespace {
class SimDAGToDAGISel : public SelectionDAGISel {
  /// Subtarget - Keep a pointer to the Sim Subtarget around so that we can
  /// make the right decision when generating code for different targets.
  const SimSubtarget *Subtarget = nullptr;

public:
  SimDAGToDAGISel(SimTargetMachine &tm,
                  CodeGenOpt::Level OptLevel) : SelectionDAGISel(tm, OptLevel) {}

  bool runOnMachineFunction(MachineFunction &MF) override {
    Subtarget = &MF.getSubtarget<SimSubtarget>();
    return SelectionDAGISel::runOnMachineFunction(MF);
  }

  void Select(SDNode *N) override;

  // Complex Pattern Selectors.
  bool SelectADDRrr(SDValue N, SDValue &R);
  bool SelectADDRri(SDValue N, SDValue &Base);

  StringRef getPassName() const override {
    return "Sim DAG->DAG Pattern Instruction Selection";
  }

  // Include the pieces autogenerated from the target description.
#include "SimGenDAGISel.inc"
};
}  // end anonymous namespace

bool SimDAGToDAGISel::SelectADDRri(SDValue Addr,
                                   SDValue &Base) {
  if (FrameIndexSDNode *FIN = dyn_cast<FrameIndexSDNode>(Addr)) {
    Base = CurDAG->getTargetFrameIndex(FIN->getIndex(), MVT::i32);
    return true;
  }
  return false;
}

bool SimDAGToDAGISel::SelectADDRrr(SDValue Addr, SDValue &R) {
  if (FrameIndexSDNode *FIN = dyn_cast<FrameIndexSDNode>(Addr)) {
    R = CurDAG->getTargetFrameIndex(FIN->getIndex(), MVT::i32);
  } else {
    R = Addr;
  }
  return true;
}

void SimDAGToDAGISel::Select(SDNode *N) {
    // TODO: implement custom selectors
  SDLoc dl(N);
  if (N->isMachineOpcode()) {
    LLVM_DEBUG(dbgs() << "== "; N->dump(CurDAG); dbgs() << "\n");
    N->setNodeId(-1);
    return;   // Already selected.
  }

  auto Opcode = N->getOpcode();
  MVT VT = N->getSimpleValueType(0);

  switch (Opcode) {
  default:
    break;
  case ISD::FrameIndex: {
    SDValue Imm = CurDAG->getTargetConstant(0, dl, MVT::i32);
    int FI = cast<FrameIndexSDNode>(N)->getIndex();
    SDValue TFI = CurDAG->getTargetFrameIndex(FI, VT);
    ReplaceNode(N, CurDAG->getMachineNode(SIM::ADDi, dl, VT, TFI, Imm));
    return;
  }
  case ISD::SDIV:
  case ISD::UDIV: {
    assert(N->getValueType(0) == MVT::i32 && "can operate only with i32 arguments");
    llvm_unreachable("TBD");

    // // FIXME: should use a custom expander to expose the SRA to the dag.
    // SDValue DivLHS = N->getOperand(0);
    // SDValue DivRHS = N->getOperand(1);

    // // Set the Y register to the high-part.
    // SDValue TopPart;
    // if (N->getOpcode() == ISD::SDIV) {
    //   TopPart = SDValue(CurDAG->getMachineNode(SP::SRAri, dl, MVT::i32, DivLHS,
    //                                CurDAG->getTargetConstant(31, dl, MVT::i32)),
    //                     0);
    // } else {
    //   TopPart = CurDAG->getRegister(SP::G0, MVT::i32);
    // }
    // TopPart = CurDAG->getCopyToReg(CurDAG->getEntryNode(), dl, SP::Y, TopPart,
    //                                SDValue())
    //               .getValue(1);

    // // FIXME: Handle div by immediate.
    // unsigned Opcode = N->getOpcode() == ISD::SDIV ? SP::SDIVrr : SP::UDIVrr;
    // CurDAG->SelectNodeTo(N, Opcode, MVT::i32, DivLHS, DivRHS, TopPart);
    // return;
  }
  case ISD::SREM:
  case ISD::UREM: {
    assert(N->getValueType(0) == MVT::i32 && "can operate only with i32 arguments");
    llvm_unreachable("TBD");
    return;
  }
  }

  SelectCode(N);
}

/// createSimISelDag - This pass converts a legalized DAG into a
/// Sim-specific DAG, ready for instruction scheduling.
///
FunctionPass *llvm::createSimISelDag(SimTargetMachine &TM,
                                     CodeGenOpt::Level OptLevel) {
  return new SimDAGToDAGISel(TM, OptLevel);
}
