//===-- SimISelDAGToDAG.cpp - A dag to dag inst selector for Sim ------===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
//
// This file defines an instruction selector for the Sim target.
//
//===----------------------------------------------------------------------===//

#include "Sim.h"
#include "SimTargetMachine.h"
#include "llvm/CodeGen/MachineRegisterInfo.h"
#include "llvm/CodeGen/SelectionDAGISel.h"
#include "llvm/IR/Intrinsics.h"
#include "llvm/Support/Debug.h"
#include "llvm/Support/ErrorHandling.h"
#include "llvm/Support/raw_ostream.h"

using namespace llvm;

#define DEBUG_TYPE "sim-isel"

//===----------------------------------------------------------------------===//
// Instruction Selector Implementation
//===----------------------------------------------------------------------===//

//===--------------------------------------------------------------------===//
/// SimDAGToDAGISel - Sim specific code to select Sim machine
/// instructions for SelectionDAG operations.
///
namespace {
class SimDAGToDAGISel : public SelectionDAGISel {
  /// Subtarget - Keep a pointer to the Sim Subtarget around so that we can
  /// make the right decision when generating code for different targets.
  const SimSubtarget *Subtarget = nullptr;

public:
  SimDAGToDAGISel(SimTargetMachine &tm,
                  CodeGenOpt::Level OptLevel) : SelectionDAGISel(tm, OptLevel) {}

  // bool runOnMachineFunction(MachineFunction &MF) override {
  //   Subtarget = &MF.getSubtarget<SimSubtarget>();
  //   return SelectionDAGISel::runOnMachineFunction(MF);
  // }

  void Select(SDNode *N) override;

  // Complex Pattern Selectors.
  // bool SelectADDRrr(SDValue N, SDValue &R1, SDValue &R2);
  // bool SelectADDRri(SDValue N, SDValue &Base, SDValue &Offset);

  StringRef getPassName() const override {
    return "Sim DAG->DAG Pattern Instruction Selection";
  }

  // Include the pieces autogenerated from the target description.
#include "SimGenDAGISel.inc"
};
}  // end anonymous namespace

// bool SimDAGToDAGISel::SelectADDRri(SDValue Addr,
//                                      SDValue &Base, SDValue &Offset) {
//   if (FrameIndexSDNode *FIN = dyn_cast<FrameIndexSDNode>(Addr)) {
//     Base = CurDAG->getTargetFrameIndex(
//         FIN->getIndex(), TLI->getPointerTy(CurDAG->getDataLayout()));
//     Offset = CurDAG->getTargetConstant(0, SDLoc(Addr), MVT::i32);
//     return true;
//   }

//   if (Addr.getOpcode() == ISD::ADD) {
//     if (ConstantSDNode *CN = dyn_cast<ConstantSDNode>(Addr.getOperand(1))) {
//       if (isInt<13>(CN->getSExtValue())) {
//         if (FrameIndexSDNode *FIN =
//                 dyn_cast<FrameIndexSDNode>(Addr.getOperand(0))) {
//           // Constant offset from frame ref.
//           Base = CurDAG->getTargetFrameIndex(
//               FIN->getIndex(), TLI->getPointerTy(CurDAG->getDataLayout()));
//         } else {
//           Base = Addr.getOperand(0);
//         }
//         Offset = CurDAG->getTargetConstant(CN->getZExtValue(), SDLoc(Addr),
//                                            MVT::i32);
//         return true;
//       }
//     }
//     if (Addr.getOperand(0).getOpcode() == SPISD::Lo) {
//       Base = Addr.getOperand(1);
//       Offset = Addr.getOperand(0).getOperand(0);
//       return true;
//     }
//     if (Addr.getOperand(1).getOpcode() == SPISD::Lo) {
//       Base = Addr.getOperand(0);
//       Offset = Addr.getOperand(1).getOperand(0);
//       return true;
//     }
//   }
//   Base = Addr;
//   Offset = CurDAG->getTargetConstant(0, SDLoc(Addr), MVT::i32);
//   return true;
// }

// bool SimDAGToDAGISel::SelectADDRrr(SDValue Addr, SDValue &R1, SDValue &R2) {
//   if (Addr.getOpcode() == ISD::FrameIndex) return false;
//   if (Addr.getOpcode() == ISD::TargetExternalSymbol ||
//       Addr.getOpcode() == ISD::TargetGlobalAddress ||
//       Addr.getOpcode() == ISD::TargetGlobalTLSAddress)
//     return false;  // direct calls.

//   if (Addr.getOpcode() == ISD::ADD) {
//     if (ConstantSDNode *CN = dyn_cast<ConstantSDNode>(Addr.getOperand(1)))
//       if (isInt<13>(CN->getSExtValue()))
//         return false;  // Let the reg+imm pattern catch this!
//     if (Addr.getOperand(0).getOpcode() == SPISD::Lo ||
//         Addr.getOperand(1).getOpcode() == SPISD::Lo)
//       return false;  // Let the reg+imm pattern catch this!
//     R1 = Addr.getOperand(0);
//     R2 = Addr.getOperand(1);
//     return true;
//   }

//   R1 = Addr;
//   R2 = CurDAG->getRegister(SIM::G0, TLI->getPointerTy(CurDAG->getDataLayout()));
//   return true;
// }

void SimDAGToDAGISel::Select(SDNode *N) {
    // TODO: implement custom handling
  SDLoc dl(N);
  if (N->isMachineOpcode()) {
    N->setNodeId(-1);
    return;   // Already selected.
  }

  auto Opcode = N->getOpcode();
  MVT VT = N->getSimpleValueType(0);

  switch (Opcode) {
  case ISD::FrameIndex: {
    SDValue Imm = CurDAG->getTargetConstant(0, dl, MVT::i32);
    int FI = cast<FrameIndexSDNode>(N)->getIndex();
    SDValue TFI = CurDAG->getTargetFrameIndex(FI, VT);
    ReplaceNode(N, CurDAG->getMachineNode(SIM::ADDi, dl, VT, TFI, Imm));
    return;
  }
  }

  SelectCode(N);
}

/// createSimISelDag - This pass converts a legalized DAG into a
/// Sim-specific DAG, ready for instruction scheduling.
///
FunctionPass *llvm::createSimISelDag(SimTargetMachine &TM,
                                     CodeGenOpt::Level OptLevel) {
  return new SimDAGToDAGISel(TM, OptLevel);
}
